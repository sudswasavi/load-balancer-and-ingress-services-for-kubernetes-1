/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware/load-balancer-and-ingress-services-for-kubernetes/internal/apis/ako/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AlbInfraSettingsLister helps list AlbInfraSettingses.
// All objects returned here must be treated as read-only.
type AlbInfraSettingsLister interface {
	// List lists all AlbInfraSettingses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AlbInfraSettings, err error)
	// AlbInfraSettingses returns an object that can list and get AlbInfraSettingses.
	AlbInfraSettingses(namespace string) AlbInfraSettingsNamespaceLister
	AlbInfraSettingsListerExpansion
}

// albInfraSettingsLister implements the AlbInfraSettingsLister interface.
type albInfraSettingsLister struct {
	indexer cache.Indexer
}

// NewAlbInfraSettingsLister returns a new AlbInfraSettingsLister.
func NewAlbInfraSettingsLister(indexer cache.Indexer) AlbInfraSettingsLister {
	return &albInfraSettingsLister{indexer: indexer}
}

// List lists all AlbInfraSettingses in the indexer.
func (s *albInfraSettingsLister) List(selector labels.Selector) (ret []*v1alpha1.AlbInfraSettings, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AlbInfraSettings))
	})
	return ret, err
}

// AlbInfraSettingses returns an object that can list and get AlbInfraSettingses.
func (s *albInfraSettingsLister) AlbInfraSettingses(namespace string) AlbInfraSettingsNamespaceLister {
	return albInfraSettingsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AlbInfraSettingsNamespaceLister helps list and get AlbInfraSettingses.
// All objects returned here must be treated as read-only.
type AlbInfraSettingsNamespaceLister interface {
	// List lists all AlbInfraSettingses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AlbInfraSettings, err error)
	// Get retrieves the AlbInfraSettings from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AlbInfraSettings, error)
	AlbInfraSettingsNamespaceListerExpansion
}

// albInfraSettingsNamespaceLister implements the AlbInfraSettingsNamespaceLister
// interface.
type albInfraSettingsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AlbInfraSettingses in the indexer for a given namespace.
func (s albInfraSettingsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AlbInfraSettings, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AlbInfraSettings))
	})
	return ret, err
}

// Get retrieves the AlbInfraSettings from the indexer for a given namespace and name.
func (s albInfraSettingsNamespaceLister) Get(name string) (*v1alpha1.AlbInfraSettings, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("albinfrasettings"), name)
	}
	return obj.(*v1alpha1.AlbInfraSettings), nil
}
